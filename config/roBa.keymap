#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        mouse_left {
            bindings = <&mkp MB1>;
            key-positions = <17 18>;
        };

        mouse_right {
            bindings = <&mkp MB2>;
            key-positions = <19 20>;
        };

        mouse_cent {
            bindings = <&mkp MB3>;
            key-positions = <19 18>;
        };

        win {
            bindings = <&none>;
            key-positions = <38 37>;
        };

        Lalt {
            bindings = <&none>;
            key-positions = <38 39>;
        };

        Ralt {
            bindings = <&none>;
            key-positions = <40 41>;
        };

        tab {
            bindings = <&none>;
            key-positions = <21 9>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                 &kp T                                                                     &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&kp A             &kp S         &kp D         &lt 3 F               &kp G                   &kp F20                        &kp F20            &kp H        &kp J  &kp K      &kp L    &mt RCTRL SEMICOLON
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                 &kp B                   &kp F20                        &lt 6 PRINTSCREEN  &kp N        &kp M  &kp COMMA  &kp DOT  &mt LS(RIGHT_SHIFT) LS(DELETE)
&mkp MB3          &kp LEFT_WIN  &kp LEFT_ALT  &mt LCTRL LANGUAGE_5  &mt LS(LEFT_WIN) SPACE  &mt LC(LEFT_WIN) LANGUAGE_4    &lt 2 BACKSPACE    &lt 1 ENTER                             &lt 5 SLASH
            >;
        };

        SYMBOL {
            bindings = <
&kp LS(NUMBER_1)  &kp LS(NUMBER_2)  &kp LS(NUMBER_3)  &kp LS(NUMBER_4)  &kp LS(N5)                    &kp LS(NUMBER_6)  &kp LS(N7)  &kp LS(N8)    &kp LS(N9)        &kp LS(N0)
&trans            &trans            &trans            &trans            &trans      &trans    &trans  &kp LEFT          &kp DOWN    &kp UP_ARROW  &kp RIGHT         &kp NON_US_BACKSLASH
&trans            &trans            &trans            &trans            &trans      &trans    &trans  &kp LC(X)         &kp LC(C)   &kp LC(V)     &kp LEFT_BRACKET  &mt RIGHT_SHIFT LS(RIGHT_BRACKET)
&trans            &trans            &trans            &trans            &trans      &trans    &trans  &trans                                                        &kp SQT
            >;
        };

        NUM {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &kp SLASH     &kp N7        &kp N8        &kp N9        &kp MINUS
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp ASTERISK  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp N0        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                                  &kp PRINTSCREEN
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE  &trans  &trans  &trans  &trans                    &trans    &trans    &trans        &trans     &trans
&kp TAB     &trans  &trans  &trans  &trans  &trans    &trans  &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans
&trans      &trans  &trans  &trans  &trans  &trans    &trans  &trans    &trans    &trans        &trans     &trans
&trans      &trans  &trans  &trans  &trans  &trans    &trans  &trans                                       &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &mkp MB1  &trans  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans  &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                              &trans
            >;
        };

        MOUSE {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4  &kp F5                                &kp F6               &kp F7            &kp F8         &kp F9                   &kp F10
&trans  &trans  &trans  &trans  &trans  &trans    &trans              &kp HOME             &mkp MB1          &kp PAGE_UP    &mkp MB2                 &kp F11
&trans  &trans  &trans  &trans  &trans  &trans    &trans              &kp END              &kp LS(LG(LEFT))  &kp PAGE_DOWN  &kp LG(LS(RIGHT_ARROW))  &mt RIGHT_SHIFT F12
&trans  &trans  &trans  &trans  &trans  &trans    &kp RA(LEFT_ARROW)  &kp RA(RIGHT_ARROW)                                                            &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans    &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans    &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans    &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
